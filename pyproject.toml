[project]
  name = "coordinax"
  dynamic = ["version"]
  description = "Coordinates in JAX"
  readme = "README.md"
  license.file = "LICENSE"
  requires-python = ">=3.11"
  authors = [
    { name = "Nathaniel Starkman", email = "nstarman@users.noreply.github.com" },
  ]
  classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
  ]
  dependencies = [
    "astropy>=7.0.0",
    "dataclassish>=0.6.0",
    "equinox>=0.11.8",
    "jax>=0.4.33,<0.4.36",
    "jaxlib>=0.4.33,<0.4.36",
    "jaxtyping>=0.2.34",
    "optional-dependencies>=0.3.2",
    "plum-dispatch>=2.5.4",
    "quax>=0.0.5",
    "quaxed>=0.6.7",
    "unxt>=1.0.0",
    "xmmutablemap>=0.1",
]

  [project.optional-dependencies]
    all = ["coordinax"]

  [project.urls]
    "Bug Tracker" = "https://github.com/GalacticDynamics/coordinax/issues"
    Changelog = "https://github.com/GalacticDynamics/coordinax/releases"
    Discussions = "https://github.com/GalacticDynamics/coordinax/discussions"
    Homepage = "https://github.com/GalacticDynamics/coordinax"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[dependency-groups]
  dev = [
      "cz-conventional-gitmoji>=0.6.1",
      { include-group = "docs" },
      { include-group = "lint" },
      { include-group = "nox" },
      { include-group = "test-all" },
  ]
  docs = [
    "furo>=2023.08.17",
    "myst_parser>=0.13",
    "sphinx>=7.0",
    "sphinx_copybutton",
    "sphinx_autodoc_typehints",
  ]
  lint = [
      "pylint>=3.3.2",
  ]
  nox = ["nox>=2024.10.9"]
  test = [
    "hypothesis[numpy]>=6.112.2",
    "pytest>=8.3.3",
    "pytest-arraydiff>=0.6.1",
    "pytest-cov >=3",
    "pytest-env",
    "pytest-github-actions-annotate-failures",
    "sybil>=8.0.0",
  ]
  test-all = [{ include-group = "test" }]


[tool.hatch]
  build.hooks.vcs.version-file = "src/coordinax/_version.py"
  version.source = "vcs"


[tool.codespell]
skip = ["uv.lock"]


[tool.commitizen]
  name = "cz_gitmoji"


[tool.coverage]
  run.source = ["coordinax"]

  [tool.coverage.report]
    exclude_also = [
      # Have to re-enable the standard pragma
      'pragma: no cover',
      # Ignore type-checking stuff
      'if typing.TYPE_CHECKING:',
      'if TYPE_CHECKING:',
      '\.\.\.',
      # Ignore contents of abstract methods
      '@abc.abstractmethod',
      '@abstractmethod',
    ]


[tool.mypy]
  disable_error_code = [
    "no-redef",     # for plum-dispatch
    "name-defined", # for jaxtyping
  ]
  disallow_incomplete_defs = false
  disallow_untyped_defs = false
  enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
  files = ["src", "tests"]
  python_version = "3.11"
  strict = true
  warn_return_any = false
  warn_unreachable = true
  warn_unused_configs = true

  [[tool.mypy.overrides]]
    disallow_incomplete_defs = true
    disallow_untyped_defs = true
    module = "coordinax.*"

  [[tool.mypy.overrides]]
    ignore_missing_imports = true
    module = [
      "array_api.*",
      "quaxed.*",
      "astropy.*",
      "equinox.*",
      "hypothesis.*",
      "jax.*",
      "coordinax.*",
      "jaxtyping.*",
      "numpy.*",
      "quax.*",
    ]


[tool.pylint]
  ignore-paths = [".*/_version.py"]
  messages_control.disable = [
    "abstract-method",            # pylint doesn't like ABC hierarchies
    "arguments-differ",           # plum-dispatch
    "cyclic-import",              # broken?
    "design",
    "duplicate-code",
    "import-outside-toplevel",    # handled by ruff
    "fixme",
    "function-redefined",         # plum-dispatch
    "invalid-name",               # handled by ruff
    "invalid-unary-operand-type", # pylint doesn't understand dataclass fields
    "isinstance-second-argument-not-valid-type", # pylint doesn't understand _cartesian_cls
    "line-too-long",
    "missing-function-docstring", # TODO: resolve
    "missing-kwoa",               # plum-dispatch
    "missing-module-docstring",
    "no-member",                  # handled by mypy
    "no-value-for-parameter",     # pylint doesn't understand multiple dispatch
    "not-a-mapping",              # pylint doesn't understand dataclass fields
    "not-an-iterable",            # pylint doesn't understand dataclass fields
    "property-with-parameters",   # Cannot have defined parameters for properties
    "protected-access",           # handled by ruff
    "redefined-builtin",          # handled by ruff
    "too-many-function-args",     # plum-dispatch
    "unexpected-keyword-arg",     # plum-dispatch
    "unnecessary-ellipsis",       # I like my ellipses in ABCs and Protocols
    "unsubscriptable-object",     # handled by mypy
    "unused-argument",            # handled by ruff
    "unused-wildcard-import",     # handled by ruff
    "wildcard-import",            # handled by ruff
    "wrong-import-position",      # handled by ruff
    "wrong-import-order",         # handled by ruff
  ]
  py-version = "3.11"
  reports.output-format = "colorized"
  similarities.ignore-imports = "yes"
  max-module-lines = 1500


[tool.pytest.ini_options]
  addopts = [
    "-ra",
    "--arraydiff",
    "--showlocals",
    "--strict-markers",
    "--strict-config",
    "--doctest-glob='*.rst | *.py'",
  ]
  filterwarnings = [
    "error",
    "ignore:ast\\.Str is deprecated and will be removed in Python 3\\.14:DeprecationWarning",  # from Sybil
    "ignore:Attribute s is deprecated and will be removed in Python 3\\.14:DeprecationWarning",  # from Sybil
    "ignore:Explicitly requested dtype <class 'jax.numpy\\.float64'> requested in astype is not available",
    "ignore:jax\\.core\\.pp_eqn_rules is deprecated:DeprecationWarning",
  ]
  log_cli_level = "INFO"
  minversion = "8.3"
  testpaths = ["README.md", "src", "tests"]
  xfail_strict = true

  env = [
    "COORDINAX_ENABLE_RUNTIME_TYPECHECKING=beartype.beartype",
  ]

[tool.ruff]
  [tool.ruff.lint]
    extend-select = ["ALL"]
    ignore = [
      "A002",    # Argument is shadowing a Python builtin
      "ANN001",  # Missing type annotation for `cls` in method
      "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
      "ARG001",  # Unused function argument  # TODO: resolve
      "B008",    # Do not perform function calls in argument defaults
      "COM812",  # <- for ruff.format
      "D103",    # Missing docstring in public function  # TODO: resolve
      "D105",    # Missing docstring in magic method
      "D203",    # 1 blank line required before class docstring
      "D213",    # Multi-line docstring summary should start at the second line
      "ERA001",  # Commented out code
      "F722",    # Syntax error in forward annotation  <- jaxtyping
      "F811",    # redefinition of unused '...'  <- plum-dispatch
      "F821",    # undefined name '...'  <- jaxtyping
      "FIX002",  # Line contains TODO
      "ISC001",  # Conflicts with formatter
      "PD",      # Pandas
      "PLR09",   # Too many <...>
      "PLR2004", # Magic value used in comparison
      "PYI041",  # Use `complex` instead of `int | complex` <- plum is more strict
      "RUF022",  # `__all__` is not sorted
      "TD002",   # Missing author in TODO
      "TD003",   # Missing issue link on the line following this TODO
    ]
    # Uncomment if using a _compat.typing backport
    # typing-modules = ["coordinax._compat.typing"]

    [tool.ruff.lint.per-file-ignores]
      "__init__.py" = ["F403"]
      "docs/conf.py" = ["A001", "INP001"]
      "noxfile.py" = ["T20"]
      "tests/**" = ["ANN", "S101", "T20"]

    [tool.ruff.lint.isort]
      combine-as-imports = true
      extra-standard-library = ["typing_extensions"]
      known-first-party = ["dataclassish", "optional_dependencies", "quaxed", "unxt", "xmmutablemap"]
      known-local-folder = ["coordinax"]

[tool.uv]
dev-dependencies = [
    "ipykernel>=6.29.5",
    "pytest-arraydiff>=0.6.1",
    "pytest-env>=1.1.5",
    "pytest>=8.3.3",
    "sybil>=8.0.0",
]
